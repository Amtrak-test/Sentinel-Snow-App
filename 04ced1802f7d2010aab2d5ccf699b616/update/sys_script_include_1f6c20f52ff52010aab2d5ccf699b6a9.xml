<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_556309_microsoft.getSentinelIncidents</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>getSentinelIncidents</name>
        <script><![CDATA[//---------------------------------------------------------------
// Return Sentinel incidents, based on the filter
function getSentinelIncidents (id) {

    var filter = null;
    if(!id) {
        // update last sync time only for full query, not for single incident by id
        updateLastSync('newIncidentsLastSync');
        filter = '(properties/createdTimeUtc gt '+ gs.getProperty('x_556309_microsoft.newIncidentsFilter') + ')';//2021-01-13T20:00:00.0Z)'; //to change to use table prop
    }
    var hasNext = false;
    var incidents = [];
    var page = 0;    

    // Prepare request
    var pagedRequest = buildRESTMessageV2(null, 'get', filter, id);

    do {    
        // Request Sentinel incidents
        var pagedResponse = pagedRequest.execute();
        var pagedResponseBody = pagedResponse.getBody();
        var pagedhttpStatus = pagedResponse.getStatusCode();
        var pagedObj = JSON.parse(pagedResponseBody);

        if(pagedhttpStatus == 200) {
            if(pagedObj.value) {
                incidents = incidents.concat(pagedObj.value);
            }
            else {
                //one incident only
                incidents = incidents.concat(pagedObj);
            }
        }
        else {
            log('Error code: ' + pagedhttpStatus + '\nMessage:\n' + pagedResponseBody);
        }


        if (pagedObj['nextLink']) { // if true, more incidents available

            hasNext = true;
            var skip = getSkipToken(pagedObj['nextLink']);
            pagedRequest = buildRESTMessageV2(skip, 'get', filter); 
            page++;
        }
        else {
            hasNext = false;
        }

    }while (hasNext);
    
    return incidents;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>sebmolendijk@hotmail.com</sys_created_by>
        <sys_created_on>2021-01-19 16:54:27</sys_created_on>
        <sys_id>1f6c20f52ff52010aab2d5ccf699b6a9</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>getSentinelIncidents</sys_name>
        <sys_package display_value="Microsoft Azure Sentinel" source="x_556309_microsoft">04ced1802f7d2010aab2d5ccf699b616</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Microsoft Azure Sentinel">04ced1802f7d2010aab2d5ccf699b616</sys_scope>
        <sys_update_name>sys_script_include_1f6c20f52ff52010aab2d5ccf699b6a9</sys_update_name>
        <sys_updated_by>sebmolendijk@hotmail.com</sys_updated_by>
        <sys_updated_on>2021-01-21 16:25:30</sys_updated_on>
    </sys_script_include>
</record_update>
