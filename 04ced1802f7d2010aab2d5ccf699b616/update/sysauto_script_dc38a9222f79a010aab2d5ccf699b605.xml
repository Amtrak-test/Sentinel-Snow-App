<?xml version="1.0" encoding="UTF-8"?><record_update table="sysauto_script">
    <sysauto_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <business_calendar/>
        <condition/>
        <conditional>false</conditional>
        <entered_time>1970-01-01 02:00:00</entered_time>
        <name>updateChangedIncidents</name>
        <offset/>
        <offset_type/>
        <run_as display_value="System Administrator">6816f79cc0a8016401c5a33be04be441</run_as>
        <run_as_tz/>
        <run_dayofmonth>1</run_dayofmonth>
        <run_dayofweek>1</run_dayofweek>
        <run_period>1970-01-01 00:01:00</run_period>
        <run_start>2021-01-22 05:10:40</run_start>
        <run_time>1969-12-31 23:00:00</run_time>
        <run_type>periodically</run_type>
        <script><![CDATA[function updateChangedIncidents (modifiedIncidents, modifiedLastSync) {
    
    var incidentTable = gs.getProperty('x_556309_microsoft.incidentTableName');
    var incidentUniqueKey = gs.getProperty('x_556309_microsoft.incidentUniqueKey');
    var updatedIncidents = 0;
    var addedComments;
    var myObj;
    var changes;
    var newComments = [];

    for (var i = 0; i < modifiedIncidents.length; i++) {

        addedComments = 0;
        myObj = new GlideRecord(incidentTable);
        myObj.addQuery(incidentUniqueKey, modifiedIncidents[i].name);
        myObj.query();

        if(myObj.next()) {
            
            changes = compareChanges(modifiedIncidents[i].properties, myObj);

            if(Object.keys(changes).length > 0) {
                
                
                if(changes.hasOwnProperty('severitySentinel')) {
                    switch(modifiedIncidents[i].properties.severity.toLowerCase()) {
                        case 'low': myObj.impact = 3; break;
                        case 'medium': myObj.impact = 2; break;
                        case 'high': myObj.impact = 1; break;
                    }
                }

                if(changes.hasOwnProperty('statusSentinel')) { 
                    switch(modifiedIncidents[i].properties.status.toLowerCase()) {
                        case 'new': myObj.incident_state = 1; break;
                        case 'active': myObj.incident_state = 2; break;
                        case 'closed': {
                            myObj.incident_state = 6;
                            myObj.close_code = 'Closed/Resolved By Caller';
                            myObj.close_notes = 'Incident closed in Sentinel. \nIncident classification: ' + incidents[i].properties.classification + '\nClose comment: ' + incidents[i].properties.classificationComment;
                            break;                
                        }                         
                    }
                }

                if(changes.hasOwnProperty('ownerSentinel')) {
                    if(modifiedIncidents[i].properties.owner.userPrincipalName) {
                        myObj.assigned_to = modifiedIncidents[i].properties.owner.userPrincipalName;
                    }
                }
                
                try {
                    myObj.setWorkflow(false);
                    myObj.update();
                    updatedIncidents++;
                    log('Incident ' + myObj.number + ' has been updated\nChanges: ' + JSON.stringify(changes));
                }
                catch(ex) {
                    var message = ex.message;
                    log('ERROR: Incident ' + myObj.number + ' update failed\n' + message);
                }
            }
            
            // add comments sync
            newComments = getIncidentComments(modifiedIncidents[i].name, modifiedLastSync); //returns added comments since last sync
            if(newComments.length > 0) {
                newComments.forEach(function (comment) {
                    myObj.work_notes = '[code]<b>CreatedTimeUtc: </b>' + comment.properties.createdTimeUtc + '<br><b>Author: </b>' + comment.properties.author.name + '(' + comment.properties.author.userPrincipalName + ')' + '<p><b>Message:</b><br>' + comment.properties.message + '</p>[/code]';
                    myObj.update();
                    addedComments++;
                });
            }

            
            if(addedComments > 0 || changes.length > 0) {
                log('Incident ' + myObj.number + ' has been updated\nChanges: ' + JSON.stringify(changes) + '\nNew comments: ' + addedComments);
            }
            
        }
        else {
            log('Modified incident ' + modifiedIncidents[i].name + ' not found in ServiceNow');
        }
    }
    
    return updatedIncidents;
}


//---------------------------------------------------------------
    // Main
    try {

        // Get modified incidents from Azure Sentinel API
        var incidents = getSentinelIncidents(null, 'update');
        var modifiedLastSync = getLastSync('modifiedIncidentsLastSync');
        updateLastSync('modifiedIncidentsLastSync');
        
        log('Azure Sentinel API returned ' + incidents.length + ' modified incidents.');
    
        if(incidents.length > 0){
            // Update incidents in SNOW
            var modifiedIncidents = updateChangedIncidents(incidents, modifiedLastSync);
            log('Modified incident: ' + modifiedIncidents);
        }
    
    }
    catch (ex) {
        var message = ex.message;
        log('ERROR main updateChangedIncidents: ' + message);
    }]]></script>
        <sys_class_name>sysauto_script</sys_class_name>
        <sys_created_by>sebmolendijk@hotmail.com</sys_created_by>
        <sys_created_on>2021-01-22 05:15:02</sys_created_on>
        <sys_id>dc38a9222f79a010aab2d5ccf699b605</sys_id>
        <sys_mod_count>79</sys_mod_count>
        <sys_name>updateChangedIncidents</sys_name>
        <sys_package display_value="Microsoft Azure Sentinel" source="x_556309_microsoft">04ced1802f7d2010aab2d5ccf699b616</sys_package>
        <sys_policy/>
        <sys_scope display_value="Microsoft Azure Sentinel">04ced1802f7d2010aab2d5ccf699b616</sys_scope>
        <sys_update_name>sysauto_script_dc38a9222f79a010aab2d5ccf699b605</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-02-09 16:04:33</sys_updated_on>
        <time_zone/>
        <upgrade_safe>false</upgrade_safe>
    </sysauto_script>
</record_update>
