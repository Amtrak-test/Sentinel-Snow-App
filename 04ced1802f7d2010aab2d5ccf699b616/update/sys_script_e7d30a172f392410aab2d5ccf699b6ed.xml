<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>incident</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="incident">stateVALCHANGES^ORimpactVALCHANGES^ORassigned_toVALCHANGES^EQ<item endquery="false" field="state" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/>
            <item endquery="false" field="impact" goto="false" newquery="false" operator="VALCHANGES" or="true" value=""/>
            <item endquery="false" field="assigned_to" goto="false" newquery="false" operator="VALCHANGES" or="true" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>update_changes_to_sentinel</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

    try {
            /*var msg = current.work_notes.getJournalEntry(1);
            //Filtering out Sentinel incidents already added to work notes 
            if((msg.toLowerCase().indexOf('createdtimeutc:') === -1) && (msg.toLowerCase().indexOf('[code]:') === -1)) {
                var httpStatus = addIncidentComments(current.correlation_id, msg);
                if(httpStatus != 201) {
                    log('ERROR: incident ' + current.number  + '\n' + httpStatus + ' - Comment not added to Sentinel\n' + msg);
                }
    
            }*/
            var myObj = current; //used in case of conflict at update time
            var incident = getSentinelIncidents(current.correlation_id);
            log('in business rule: ' + JSON.stringify(current.correlation_id + '\nSetinel incident: ' + incident.properties.incidentNumber));
            var changes = compareChanges(incident.properties, myObj);
            log('Sentinel Incident ' + incident.properties.incidentNumber + ' has been updated after snow update\nChanges: ' + JSON.stringify(changes));


            

            
    }
    catch (ex) {
        var message = ex.message;
        log('ERROR: ' + message);
            }
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>sebmolendijk@hotmail.com</sys_created_by>
        <sys_created_on>2021-01-24 15:07:40</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>e7d30a172f392410aab2d5ccf699b6ed</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>update_changes_to_sentinel</sys_name>
        <sys_overrides/>
        <sys_package display_value="Microsoft Azure Sentinel" source="x_556309_microsoft">04ced1802f7d2010aab2d5ccf699b616</sys_package>
        <sys_policy/>
        <sys_scope display_value="Microsoft Azure Sentinel">04ced1802f7d2010aab2d5ccf699b616</sys_scope>
        <sys_update_name>sys_script_e7d30a172f392410aab2d5ccf699b6ed</sys_update_name>
        <sys_updated_by>sebmolendijk@hotmail.com</sys_updated_by>
        <sys_updated_on>2021-01-24 18:33:51</sys_updated_on>
        <template/>
        <when>async</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=e7d30a172f392410aab2d5ccf699b6ed"/>
</record_update>
